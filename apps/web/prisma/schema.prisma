// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  // url      = env("POSTGRES_PRISMA_NEON_URL") // uses connection pooling

  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?
  password       String?
  gh_username    String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  knowledgebases Knowledgebase[]
  collection     Collection[]
  subCollection  SubCollection[]
  article        Article[]

  @@index([email])
  @@index([username])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Knowledgebase {
  id            String       @id @default(cuid())
  name          String
  description   String?      @db.Text
  logo          String?      @db.Text
  font          String       @default("font-cal")
  notionLink    String
  collections   Collection[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleCount  Int          @default(0)
  slug          String?      @unique
  subdomain     String?      @unique
  customDomain  String?      @unique
  image         String?      @db.Text
  imageBlurhash String?      @db.Text
  message404    String?      @default("Blimey! You've found a page that doesn't exist.") @db.Text
  totalVisitors Int          @default(0)
  lastVisited   DateTime?
  articles      Article[]

  @@index([userId])
}

model Collection {
  id              String          @id @default(cuid())
  name            String
  slug            String?
  pageIcon        String?
  description     String?
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  knowledgebaseId String
  knowledgebase   Knowledgebase   @relation(fields: [knowledgebaseId], references: [id], onDelete: Cascade)
  type            String
  properties      Json
  subCollections  SubCollection[] @relation("SubCollection")
  articleCount    Int             @default(0) // Total count of articles in the collection
}

model SubCollection {
  id            String     @id @default(cuid())
  name          String
  slug          String
  description   String
  type          String
  view_ids      String[]
  articles      Article[]
  collection_id String
  collectionId  String
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "SubCollection")
  articleCount  Int        @default(0) // Total count of articles in the subcollection
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([collectionId])
}

model Article {
  id          String  @id @default(cuid())
  notionId    String? @db.Text
  title       String
  slug        String
  properties  Json
  recordMap   Json?
  description String
  image       String? @db.Text

  visits      Int       @default(0)
  lastVisited DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  subCollectionId String
  subCollection   SubCollection @relation(fields: [subCollectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  knowledgebaseId String
  knowledgebase   Knowledgebase @relation(fields: [knowledgebaseId], references: [id], onDelete: Cascade)

  // @@unique([slug, siteId])
  // @@index([siteId])
  // @@index([userId])
  @@index([subCollectionId])
}
