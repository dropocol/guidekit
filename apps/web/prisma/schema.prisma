generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  password               String?
  email                  String?                  @unique
  isEmailVerified        Boolean                  @default(false)
  emailVerifiedAt        DateTime?
  image                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  knowledgebase          Knowledgebase[]
  article                Article[]
  collection             Collection[]
  subCollection          SubCollection[]
  knowledgebaseAnalytics KnowledgebaseAnalytics[]
  articleAnalytics       ArticleAnalytics[]
  monthlyAnalytics       UserMonthlyAnalytics[]
  dailyAnalytics         DailyAnalytics[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Knowledgebase {
  id            String       @id @default(cuid())
  name          String
  description   String?
  logo          String?
  favicon       String?
  notionLink    String
  userId        String
  slug          String?      @unique
  subdomain     String?      @unique
  customDomain  String?      @unique
  image         String?
  imageBlurhash String?
  message404    String?      @default("Blimey! You've found a page that doesn't exist.")
  articleCount  Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  articles      Article[]
  collections   Collection[]
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Collection {
  id              String          @id @default(cuid())
  name            String
  slug            String?
  pageIcon        String?
  description     String?
  userId          String
  knowledgebaseId String
  type            String
  properties      Json
  articleCount    Int             @default(0)
  knowledgebase   Knowledgebase   @relation(fields: [knowledgebaseId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCollections  SubCollection[] @relation("SubCollection")
}

model SubCollection {
  id                   String     @id @default(cuid())
  name                 String
  slug                 String
  description          String
  type                 String
  userId               String
  collectionId         String
  notion_view_ids      String[]
  notion_collection_id String?
  articleCount         Int        @default(0)
  articles             Article[]
  collection           Collection @relation("SubCollection", fields: [collectionId], references: [id], onDelete: Cascade)
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([collectionId])
}

model Article {
  id              String        @id @default(cuid())
  title           String
  slug            String
  properties      Json
  recordMap       String?
  description     String
  image           String?
  userId          String
  subCollectionId String
  knowledgebaseId String
  notion_id       String?
  knowledgebase   Knowledgebase @relation(fields: [knowledgebaseId], references: [id], onDelete: Cascade)
  subCollection   SubCollection @relation(fields: [subCollectionId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  articleAnalytics ArticleAnalytics[]

  @@index([subCollectionId])
}

// Analytics
model KnowledgebaseAnalytics {
  id              String           @id @default(cuid())
  knowledgebaseId String           @unique
  userId          String
  totalVisits     Int              @default(0) // Changed from totalVisitors
  lastVisited     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  dailyAnalytics  DailyAnalytics[] // Changed from dailyVisits
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ArticleAnalytics {
  id             String           @id @default(cuid())
  articleId      String           @unique
  userId         String
  totalVisits    Int              @default(0)
  lastVisited    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  dailyAnalytics DailyAnalytics[] // Changed from dailyVisits
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  article        Article          @relation(fields: [articleId], references: [id])

  @@index([userId])
}

model DailyAnalytics {
  id                       String                  @id @default(cuid())
  userId                   String
  date                     DateTime
  totalVisits              Int                     @default(0)
  knowledgebaseAnalytics   KnowledgebaseAnalytics? @relation(fields: [knowledgebaseAnalyticsId], references: [id])
  knowledgebaseAnalyticsId String?
  articleAnalytics         ArticleAnalytics?       @relation(fields: [articleAnalyticsId], references: [id])
  articleAnalyticsId       String?
  user                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, knowledgebaseAnalyticsId])
  @@unique([date, articleAnalyticsId])
  @@index([userId])
  @@index([date])
}

model UserMonthlyAnalytics {
  id          String   @id @default(cuid())
  userId      String
  year        Int
  month       Int
  totalVisits Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month])
  @@index([userId])
}
