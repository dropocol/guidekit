generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  password       String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  article        Article[]
  collection     Collection[]
  knowledgebases Knowledgebase[]
  subCollection  SubCollection[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Knowledgebase {
  id            String       @id @default(cuid())
  name          String
  description   String?
  logo          String?
  font          String       @default("font-cal")
  notionLink    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  articleCount  Int          @default(0)
  slug          String?      @unique
  subdomain     String?      @unique
  customDomain  String?      @unique
  image         String?
  imageBlurhash String?
  message404    String?      @default("Blimey! You've found a page that doesn't exist.")
  totalVisitors Int          @default(0)
  lastVisited   DateTime?
  favicon       String?
  articles      Article[]
  collections   Collection[]
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Collection {
  id              String          @id @default(cuid())
  name            String
  slug            String?
  pageIcon        String?
  description     String?
  userId          String
  knowledgebaseId String
  type            String
  properties      Json
  articleCount    Int             @default(0)
  knowledgebase   Knowledgebase   @relation(fields: [knowledgebaseId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCollections  SubCollection[] @relation("SubCollection")
}

model SubCollection {
  id                   String     @id @default(cuid())
  name                 String
  slug                 String
  description          String
  type                 String
  notion_view_ids      String[]
  notion_collection_id String
  collectionId         String
  articleCount         Int        @default(0)
  userId               String
  articles             Article[]
  collection           Collection @relation("SubCollection", fields: [collectionId], references: [id], onDelete: Cascade)
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([collectionId])
}

model Article {
  id              String        @id @default(cuid())
  title           String
  slug            String
  properties      Json
  recordMap       Json?
  description     String
  image           String?
  visits          Int           @default(0)
  lastVisited     DateTime?
  userId          String
  subCollectionId String
  knowledgebaseId String
  notion_id       String?
  knowledgebase   Knowledgebase @relation(fields: [knowledgebaseId], references: [id], onDelete: Cascade)
  subCollection   SubCollection @relation(fields: [subCollectionId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([subCollectionId])
}
